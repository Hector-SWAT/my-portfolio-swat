---
// src/components/Skills.astro
const skills = {
  cybersecurity: [
    { name: "Pentesting", level: 85, icon: "fa-solid fa-shield-halved" },
    { name: "OWASP", level: 80, icon: "fa-solid fa-bug" },
    { name: "Análisis Forense", level: 75, icon: "fa-solid fa-magnifying-glass" },
    { name: "Seguridad Redes", level: 80, icon: "fa-solid fa-network-wired" },
    { name: "Criptografía", level: 70, icon: "fa-solid fa-lock" }
  ],
  frontend: [
    { name: "JavaScript", level: 90, icon: "fa-brands fa-js" },
    { name: "React", level: 85, icon: "fa-brands fa-react" },
    { name: "HTML/CSS", level: 95, icon: "fa-brands fa-html5" },
    { name: "Vue.js", level: 80, icon: "fa-brands fa-vuejs" },
    { name: "Tailwind CSS", level: 85, icon: "fa-solid fa-wind" }
  ],
  backend: [
    { name: "Node.js", level: 80, icon: "fa-brands fa-node" },
    { name: "Python", level: 75, icon: "fa-brands fa-python" },
    { name: "PHP", level: 70, icon: "fa-brands fa-php" },
    { name: "MySQL", level: 75, icon: "fa-solid fa-database" },
    { name: "SQL", level: 80, icon: "fa-solid fa-database" }
  ]
};
---

<section id="habilidades" class="skills-section">
  <!-- Partículas de fondo -->
  <div class="particles-container">
    {Array.from({length: 15}, (_, i) => (
      <div class="particle" style={`--delay: ${i * 0.3}s; --duration: ${4 + Math.random() * 2}s`}></div>
    ))}
  </div>

  <div class="skills-container">
    <h2 class="skills-title" id="skills-title">Mis <span class="highlight">Habilidades</span></h2>
    
    <!-- Línea de progreso horizontal -->
    <div class="progress-line" id="progress-line"></div>
    
    <div class="skills-grid">

      <!-- Ciberseguridad -->
      <div class="skill-category" data-category="cybersecurity">
        <div class="category-header">
          <i class="fa-brands fa-linux category-icon"></i>
          <h3 class="category-title">Ciberseguridad</h3>
        </div>
        <div class="skills-list">
          {skills.cybersecurity.map((skill, index) => (
            <div class="skill-item" data-delay={index * 100}>
              <div class="skill-info">
                <i class={skill.icon + " skill-icon"}></i>
                <span class="skill-name">{skill.name}</span>
                <span class="skill-percent">{skill.level}%</span>
              </div>
              <div class="skill-bar">
                <div 
                  class="skill-progress" 
                  style={`width: 0%`}
                  data-level={skill.level}
                ></div>
              </div>
            </div>
          ))}
        </div>
      </div>

      <!-- Frontend -->
      <div class="skill-category" data-category="frontend">
        <div class="category-header">
          <i class="fa-solid fa-code category-icon"></i>
          <h3 class="category-title">Frontend</h3>
        </div>
        <div class="skills-list">
          {skills.frontend.map((skill, index) => (
            <div class="skill-item" data-delay={index * 100}>
              <div class="skill-info">
                <i class={skill.icon + " skill-icon"}></i>
                <span class="skill-name">{skill.name}</span>
                <span class="skill-percent">{skill.level}%</span>
              </div>
              <div class="skill-bar">
                <div 
                  class="skill-progress" 
                  style={`width: 0%`}
                  data-level={skill.level}
                ></div>
              </div>
            </div>
          ))}
        </div>
      </div>
      
      <!-- Backend -->
      <div class="skill-category" data-category="backend">
        <div class="category-header">
          <i class="fa-solid fa-gears category-icon"></i>
          <h3 class="category-title">Backend</h3>
        </div>
        <div class="skills-list">
          {skills.backend.map((skill, index) => (
            <div class="skill-item" data-delay={index * 100}>
              <div class="skill-info">
                <i class={skill.icon + " skill-icon"}></i>
                <span class="skill-name">{skill.name}</span>
                <span class="skill-percent">{skill.level}%</span>
              </div>
              <div class="skill-bar">
                <div 
                  class="skill-progress" 
                  style={`width: 0%`}
                  data-level={skill.level}
                ></div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  .skills-section {
    padding: 5rem 1rem;
    background: linear-gradient(
      135deg, 
      rgba(15, 15, 15, 0.95) 0%, 
      rgba(26, 26, 26, 0.98) 100%
    );
    position: relative;
    overflow: hidden;
  }

  .skills-section::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: 
      radial-gradient(circle at 20% 30%, rgba(218, 165, 32, 0.05) 0%, transparent 40%),
      radial-gradient(circle at 80% 70%, rgba(255, 215, 0, 0.03) 0%, transparent 40%);
    pointer-events: none;
  }

  /* Partículas de fondo */
  .particles-container {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    overflow: hidden;
    pointer-events: none;
  }

  .particle {
    position: absolute;
    width: 4px;
    height: 4px;
    background: linear-gradient(45deg, #00ffff, #0099ff);
    border-radius: 50%;
    opacity: 0.6;
    animation: floatUp var(--duration, 4s) linear infinite;
    animation-delay: var(--delay, 0s);
    left: calc(var(--random) * 100%);
  }

  .particle:nth-child(odd) {
    left: calc(10% + 80% * var(--random, 0.5));
    background: linear-gradient(45deg, #daa520, #ffd700);
  }

  .particle:nth-child(even) {
    left: calc(20% + 60% * var(--random, 0.3));
  }

  .particle:nth-child(3n) {
    left: calc(30% + 40% * var(--random, 0.7));
  }

  @keyframes floatUp {
    0% {
      transform: translateY(100vh) scale(0);
      opacity: 0;
    }
    10% {
      opacity: 0.6;
      transform: translateY(90vh) scale(1);
    }
    90% {
      opacity: 0.6;
      transform: translateY(10vh) scale(1);
    }
    100% {
      transform: translateY(-10vh) scale(0);
      opacity: 0;
    }
  }

  .skills-container {
    max-width: 1200px;
    margin: 0 auto;
    position: relative;
    z-index: 1;
  }

  .skills-title {
    font-size: 2.8rem;
    font-weight: 800;
    text-align: center;
    margin-bottom: 2rem;
    color: #e5e5e5;
    position: relative;
    display: inline-block;
    left: 50%;
    transform: translateX(-50%);
    opacity: 0;
    transform: translateX(-50%) translateY(30px);
    transition: all 0.8s ease;
  }

  .skills-title.visible {
    opacity: 1;
    transform: translateX(-50%) translateY(0);
  }

  .skills-title .highlight {
    background: linear-gradient(45deg, #FFD700, #DAA520);
    -webkit-background-clip: text;
    background-clip: text;
    -webkit-text-fill-color: transparent;
  }

  /* Línea de progreso */
  .progress-line {
    width: 100%;
    height: 3px;
    background: rgba(255, 255, 255, 0.1);
    margin: 2rem auto 4rem;
    border-radius: 2px;
    overflow: hidden;
    position: relative;
  }

  .progress-line::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 0;
    background: linear-gradient(90deg, #0066ff, #00ffff, #00ffff, #0066ff);
    background-size: 200% 100%;
    animation: progressFill 2s ease-out forwards, gradientShift 3s ease-in-out infinite;
    border-radius: 2px;
  }

  @keyframes progressFill {
    0% { width: 0; }
    100% { width: 100%; }
  }

  @keyframes gradientShift {
    0%, 100% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
  }

  .skills-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 2rem;
  }

  .skill-category {
    background: rgba(26, 26, 26, 0.7);
    padding: 1.8rem;
    border-radius: 16px;
    border: 1px solid rgba(218, 165, 32, 0.15);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
    transition: all 0.4s ease;
    opacity: 0;
    transform: translateY(40px);
    perspective: 1000px;
  }

  .skill-category.visible {
    opacity: 1;
    transform: translateY(0);
  }

  .skill-category:hover {
    transform: translateY(-8px) rotateX(5deg);
    box-shadow: 0 20px 50px rgba(0, 255, 255, 0.2);
    border-color: rgba(0, 255, 255, 0.4);
  }

  .category-header {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1.8rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid rgba(218, 165, 32, 0.2);
  }

  .category-icon {
    font-size: 1.8rem;
    color: #DAA520;
    background: rgba(218, 165, 32, 0.1);
    width: 50px;
    height: 50px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 12px;
    transition: all 0.3s ease;
  }

  .skill-category:hover .category-icon {
    transform: rotate(360deg) scale(1.1);
    background: rgba(0, 255, 255, 0.2);
    color: #00ffff;
    box-shadow: 0 0 20px rgba(0, 255, 255, 0.3);
  }

  .category-title {
    font-size: 1.5rem;
    font-weight: 700;
    color: #FFD700;
    margin: 0;
    transition: color 0.3s ease;
  }

  .skill-category:hover .category-title {
    color: #00ffff;
  }

  .skills-list {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .skill-item {
    margin-bottom: 0.5rem;
    opacity: 0;
    transform: translateY(20px) scale(0.9);
    transition: all 0.6s ease;
  }

  .skill-item.visible {
    opacity: 1;
    transform: translateY(0) scale(1);
  }

  .skill-item:hover {
    transform: translateX(5px);
  }

  .skill-info {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 0.5rem;
  }

  .skill-icon {
    font-size: 1.2rem;
    color: #DAA520;
    width: 24px;
    text-align: center;
    transition: all 0.3s ease;
  }

  .skill-item:hover .skill-icon {
    color: #00ffff;
    transform: scale(1.2) rotate(15deg);
  }

  .skill-name {
    flex-grow: 1;
    margin-left: 0.8rem;
    color: #e5e5e5;
    font-weight: 600;
    font-size: 1rem;
    transition: color 0.3s ease;
  }

  .skill-item:hover .skill-name {
    color: #ffffff;
  }

  .skill-percent {
    color: rgba(255, 215, 0, 0.8);
    font-weight: 700;
    font-size: 0.9rem;
    min-width: 40px;
    text-align: right;
    transition: color 0.3s ease;
  }

  .skill-item:hover .skill-percent {
    color: #00ffff;
  }

  .skill-bar {
    height: 8px;
    background: rgba(255, 255, 255, 0.08);
    border-radius: 4px;
    overflow: hidden;
    position: relative;
    box-shadow: inset 0 2px 4px rgba(0,0,0,0.2);
  }

  .skill-progress {
    height: 100%;
    border-radius: 4px;
    position: relative;
    background: linear-gradient(90deg, #0066ff, #00aaff, #00ffff);
    background-size: 200% 100%;
    width: 0;
    transition: width 1.5s cubic-bezier(0.4, 0, 0.2, 1);
    animation: gradientMove 3s ease-in-out infinite;
  }

  @keyframes gradientMove {
    0%, 100% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
  }

  .skill-progress::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(90deg, 
      rgba(255,255,255,0) 0%, 
      rgba(255,255,255,0.3) 50%, 
      rgba(255,255,255,0) 100%);
    opacity: 0.4;
    animation: shimmer 2s infinite;
  }

  @keyframes shimmer {
    0% { transform: translateX(-100%); }
    100% { transform: translateX(100%); }
  }

  /* Bounce animation */
  @keyframes bounceIn {
    0% {
      opacity: 0;
      transform: translateY(40px) scale(0.3);
    }
    50% {
      opacity: 1;
      transform: translateY(-10px) scale(1.05);
    }
    70% {
      transform: translateY(5px) scale(0.95);
    }
    100% {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }

  .skill-item.bounce {
    animation: bounceIn 0.6s cubic-bezier(0.68, -0.55, 0.265, 1.55);
  }

  @media (prefers-reduced-motion: no-preference) {
    .skill-progress {
      animation: gradientMove 3s ease-in-out infinite;
    }
  }

  @media (max-width: 768px) {
    .skills-grid {
      grid-template-columns: 1fr;
    }
    
    .skills-title {
      font-size: 2.2rem;
      margin-bottom: 3rem;
    }
    
    .category-header {
      margin-bottom: 1.5rem;
    }

    .skill-category:hover {
      transform: translateY(-5px);
    }
  }
</style>

<script is:inline>
  document.addEventListener('DOMContentLoaded', function() {
    // Intersection Observer para animaciones
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('visible');
        }
      });
    }, {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    });

    // Observar título
    const skillsTitle = document.getElementById('skills-title');
    if (skillsTitle) {
      observer.observe(skillsTitle);
    }

    // Observar línea de progreso
    const progressLine = document.getElementById('progress-line');
    if (progressLine) {
      observer.observe(progressLine);
    }

    // Observar categorías con delay
    const categories = document.querySelectorAll('.skill-category');
    categories.forEach((category, index) => {
      setTimeout(() => {
        observer.observe(category);
      }, index * 200);
    });

    // Función para animar skills individualmente
    function animateSkills() {
      const skillsSection = document.querySelector('.skills-section');
      const sectionPosition = skillsSection.getBoundingClientRect().top;
      const screenPosition = window.innerHeight / 1.2;
      
      if (sectionPosition < screenPosition) {
        // Animar barras de progreso
        const skillBars = document.querySelectorAll('.skill-progress');
        skillBars.forEach((bar, index) => {
          setTimeout(() => {
            const level = bar.getAttribute('data-level');
            bar.style.width = level + '%';
          }, index * 100);
        });

        // Animar skill items con staggered reveal
        const skillItems = document.querySelectorAll('.skill-item');
        skillItems.forEach((item, index) => {
          setTimeout(() => {
            item.classList.add('visible', 'bounce');
          }, index * 150);
        });

        window.removeEventListener('scroll', animateSkills);
      }
    }
    
    // Event listeners
    window.addEventListener('scroll', animateSkills);
    animateSkills(); // Ejecutar una vez al cargar

    // Efecto parallax para partículas
    window.addEventListener('scroll', () => {
      const scrolled = window.pageYOffset;
      const particles = document.querySelectorAll('.particle');
      
      particles.forEach((particle, index) => {
        const speed = 0.1 + (index % 3) * 0.05;
        particle.style.transform = `translateY(${scrolled * speed}px)`;
      });
    });

    // Asignar posiciones random a partículas
    document.querySelectorAll('.particle').forEach(particle => {
      particle.style.setProperty('--random', Math.random());
    });
  });
</script>